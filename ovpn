#!/usr/bin/env bash
###############################################################################
#
# ovpn - a bash script to join the Oracle VPN using credentials stored in
#        an online vault (like OCI Vault)
#
# version history:
# 2.0 2021-06 Changed format of the json stored in vault
# 1.2 2021-03-18 Added generation of instructions
# 1.1 2021-03-12 Added Vault
# 1.0 2021-03-06 Initial release
#
###############################################################################

###############################################################################
# JSON format of the credentials to be stored in OCI Vault
#
# {
#   "version": 2,
#   "default": "standard",
#   "connections": [
#     {
#       "label": "standard",
#       "endpoint": "myaccess.oraclevpn.com",
#       "username": "dgerrity_us",
#       "password": "mypassword",
#       "password_override": "N",
#       "password_prompt": "n/a"
#     },
#     {
#       "label": "alternate",
#       "endpoint": "sea-twvpn.oraclvpn.com",
#       "username": "dgerrity_us",
#       "password": "mypassword",
#       "password_override": "N",
#       "password_prompt": "n/a"
#     },
#     {
#       "label": "ocna",
#       "endpoint": "se3-p-sec-vpn-01.oracle-ocna.com",
#       "username": "dan.gerrity",
#       "password": "yubi",
#       "password_override": "Y",
#       "password_prompt": "Enter your pin and press your yubikey"
#     }
#   ]
# }
# 
###############################################################################

version="2.0"
o_exec="/opt/cisco/anyconnect/bin/vpn"         # location of the vpn executable
o_label="${OCI_VPN_LABEL:-standard}"           # label of desired connection
o_method="${OCI_VPN_DEFAULT:-OCI}"             # default method
o_ocid="${OCI_VPN_KEY}"                        # OCID of the secret in the vault
 
###############################################################################
# Usage
###############################################################################

function usage() {
#   Displays usage information
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    echo -e "${me} version ${version}"; echo
    [[ "${1}" == "version" ]] && exit 1
    echo -e "${me} establishes or disconnects from the VPN using secrets stored in OCI Vault."
    echo -e "Usage: ${me} [options] cmd"
    echo -e " "
    echo -e "Commands: ${_b_}on | off | status${_p_}"
    echo -e " "
    echo -e "Options"
    echo -e "  -d           debug"
    echo -e "  -h           this message"
    echo -e "  -v           verbose"
    echo -e "  -e [domain]  override the endpoint to be used"
    echo -e "  -i           write the vault instructions to stdout"
    echo -e "  -o [ocid]    key to use to locate the entry in the vault (default from environment)"
    echo -e "  -l [label]   use the specified label to locate the correct tuple (endpoint, username, password)"
    echo -e "  -p [pwd]     override the password"
    echo -e "  -u [uname]   override the username"
    echo -e "  -x [file]    override the default location of the cisco anyconnect vpn executable (default ${o_exec})"
    echo -e " "
    exit "${1:=1}"
}

###############################################################################
# Debugging routines
###############################################################################

# Text coloring
_r_="\033[1;31m"
_g_="\033[5;32m"
_y_="\033[1;33m"
_b_="\033[1;39m"
_p_="\033[0m"

me=$(basename "$0")
function vecho()   { [[ ${o_verbose} ]] && echo -e "${_y_}$*${_p_}"; }
function decho()   { [[ ${o_debug}   ]] && echo -e "${_r_}$*${_p_}";    }

function enter() {
#   Call at the entry of each function for debugging purposes: enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    [[ ! ${o_debug} ]] && return 0
    fn=${1}; ln=${2}; shift; shift;
    printf "${_g_}Line %3s, %s${_p_}" "${ln}" "${fn}"
    [[ -n "$*" ]] && echo -e "${_g_}( $* )${_p_}" || echo " "
}

###############################################################################
# Functions
###############################################################################

OCIIsWorking() {
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    vecho "Checking to see if the oci cli is installed and configured"
    decho "Looking for OCI secret with key \"${o_ocid}\""
    if json="$(oci secrets secret-bundle get --secret-id "${o_ocid}" 2> /dev/null)"; then
        json="$(echo "${json}" | jq -r '.data."secret-bundle-content".content' | base64 -d)"
    fi
    [[ "${json}" ]]
}

getCredentialsFromOCI() {
    # Get the json blob frm the vault and report an error if there is a problem
    # Determine if we have specified a label. If not, read it with jq .default
    # Select the endpoint using .connections[] | select(.label == ${label})
    # get the endpoint (-r .endpoint), the username (-r .username)
    # find out if a password is necessary, if so, see if one has been supplied, if not, ask for it using the prompt
    # we're done
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    if bundle="$(oci secrets secret-bundle get --secret-id "${o_ocid}" 2> /dev/null)"; then
        json="$(echo "${bundle}" | jq -r '.data."secret-bundle-content".content' 2>/dev/null | base64 -d)"
	[[ ${#json} -lt 50 ]] && echo "Unexpected secret format ${bundle}." && exit 22
	vers="$(echo "${json}" | jq -r '.version')"
	if [[ "${vers}" == "null" ]]; then
	    echo "Invalid secret version - have you updated your format to version 2?" && exit 23
	elif [[ ! "${vers}" -eq 2 ]]; then
	    echo "Unexpected secret version \"${version}\"" && exit 23
	fi
[[ ! ${o_label} ]] && o_label="$(echo "${json}" | jq '.default')"
	json="$(echo "${json}" | LABEL=${o_label} jq -r '.connections[] | select(.label == env.LABEL)')"
	[[ ! "${json}" ]] && echo "Could not find label \"${o_label}\" in secret." && exit 24
	[[ ! "${o_endpoint}" ]] && o_endpoint="$(echo "${json}" | jq -r '.endpoint')"
	[[ ! "${o_username}" ]]  && o_username="$(echo "${json}" | jq -r '.username')"
	if [[ ! "${o_password}" ]]; then
	    override="$(echo "${json}" | jq -r '.password_override')"
	    if [[ "${override^^}" == "Y" ]]; then
		prompt="$(echo "${json}" | jq -r '.password_prompt')"
		[[ ! "${prompt}" ]] && prompt="Enter password: "
		read -rsp "${prompt}" o_password
		echo ""
	    else
		o_password="$(echo "${json}" | jq -r '.password')"
	    fi
	fi
    else
	echo "Could not retrieve secret bundle from vault: ${bundle}" && exit 21
    fi
}

joinvpn() {
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    if [[ "$(uname)" == "Darwin" ]]; then
        pid="$(pgrep "Cisco AnyConnect")"
        [[ "${pid}" ]] && echo "Warning, Cisco Anyconnect is running, attempting to quit" && \
            osascript -e 'tell app "Cisco AnyConnect" to quit'
    else
        pid="$(pgrep "vpnui")"
        [[ "${pid}" ]] && echo "Warning, Cisco VPN UI Client is running, attempting to kill" && kill "${pid}"
    fi
    decho "Getting credentials"
    case "${o_method}" in
        OCI) if ! OCIIsWorking "$@"; then
                echo "OCI CLI lookup problem; invalid oci setup or bad key provided.  Use -v for details."
                exit 100
             fi
	     getCredentialsFromOCI "$@";;
	*)   echo "Unsupported method of getting credentials" && exit 100;;
    esac
    echo "Connecting to ${o_endpoint} with username ${o_username}"
    decho "Using password ${o_password}"
    if [[ ${o_verbose} ]]; then
        printf "%s\n%s\ny\n" "${o_username}" "${o_password}" | ${o_exec} -s connect "${o_endpoint}"
    else
        printf "%s\n%s\ny\n" "${o_username}" "${o_password}" | ${o_exec} -s connect "${o_endpoint}" &> /dev/null
    fi
    ${o_exec} -s state | sed 's/>>//' | sed -n 's/\(state:.*\).*/\1/p;/state/q'
}

check_method() {
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    case "${o_method}" in
        OCI)       if [[ ! "$(\which oci)" ]]; then
                       echo "Missing oci command-line interface."
                       exit 1
                   fi;;
        *)         echo "Unknown credential lookup method specified: \"${o_method}\""
                   exit 1;;
    esac
}

check_exec() {
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    [[ ! "$(\which "${o_exec}")" ]] && echo "Missing vpn executable: ${o_exec}" && exit 2
    [[ ! "$(\which jq)" ]] && echo "Missing the json query tool jq - install that first" && exit 3
    if ! pgrep -i ".*vpn.*d" >/dev/null; then echo "Missing a running vpn daemon.  Is Cisco installed?"; exit 4; fi
}

write_instructions() {
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"

    if OCIIsWorking "$@"; then
        echo -e "${_g_}OCI appears to be configured properly.${_p_}\n"
    fi
    echo "1. Create a new Vault or use an existing one"
    echo "2. Create a new secret or create a new version of an existing one"
    echo "3. Copy the ocid of the secret into your environment as OCI_VPN_KEY"
    echo "   (currently \"${OCI_VPN_KEY}\").  Use -k key to override this."
    echo "4. See the script ${0} for the JSON format to put into the secret."
}

main() {
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    case "${1}" in
        connect | on)
            if [[ "$(uname)" == "Darwin" ]]; then
                running="$(route -n get google.com | grep "interface: utun")"
            else
                running="$(route -n | grep "^0.0.0.0.*U.*tun")"
            fi
            if [[ "${running}" ]]; then
                echo "VPN already connected."
                ${o_exec} -s state | sed 's/>>//' | sed -n 's/\(state:.*\).*/\1/p;/state/q'
                exit 0
            fi 
            check_method "$@"
            check_exec "$@"
            joinvpn "$@";;

        disconnect | off)
            vecho "Signing off"
            check_exec "$@"
            ${o_exec} -s disconnect &> /dev/null
            main state;;

        status | state)
            vecho "Getting state"
            check_exec "$@"
            ${o_exec} -s state | sed 's/>>//' | sed -n 's/\(state:.*\).*/\1/p;/state/q'
            if pgrep "Cisco AnyConnect" &> /dev/null; then
		echo "  client: Running"
		echo "endpoint: $(dig +short -x "$("${o_exec}" stats | grep "Server Address" | awk '{print $3}')")"
	    fi;;
        *)  [[ "${1}" ]] && echo "Invalid command \"${1}\" provided"
            usage 2;;
    esac
}

##############################################################################
# Options - process command line options
##############################################################################

# set o_config o_exec o_label o_method
unset o_debug o_endpoint o_password o_username o_verbose o_instructions

while getopts ":dhv1e:il:o:p:u:x:" option; do
    case ${option} in
        d) o_debug=true; o_verbose=true;;
        h) usage 0;;
        v) o_verbose=true;;
	1) "${me} ${version} no longer supports 1Password." && usage 3;;
        e) o_endpoint=${OPTARG};;
        i) o_instructions=true;;
        l) o_label=${OPTARG};;
        o) o_ocid=${OPTARG};;
        p) o_password=${OPTARG};;
        u) o_username=${OPTARG};;
        x) o_exec=${OPTARG};;
        :) echo "Required argument to -${OPTARG} not specified."
           exit 1;;
        *) echo "Option not recognized."
           usage "$@";;
    esac
done

o_cmd="${!OPTIND:-connect}"

[[ ${o_debug} ]] && for i in o_debug o_verbose o_cmd o_endpoint o_exec o_ocid o_method o_password o_username \
                                     o_label o_username o_url o_instructions BASH_VERSION SHELL; do
    decho "${i}=\"${!i}\" "
done
decho

if [[ ${o_instructions} ]]; then
    write_instructions "$@"
else
    main "${o_cmd}"
fi
