#!/usr/bin/env bash
###############################################################################
# 
# wakeup - a script that is called when this mac wakes from sleep
#
# $Id: .wakeup-v 1.19 2013-07-31 09:20:51-07 dan Exp $
#
###############################################################################

###############################################################################
# Functions 
###############################################################################

function maybeGrowl() {
    [[ ! ${o_growl} ]] && return
    [[ $(which growl) ]] && "growl $@"
    [[ $(which terminal-notifier) ]] && "terminal-notifier -title ${0} -message $@"
}

function waitForSSID() {
    clog "waiting for SSID..."
    declare -i count=0
    if [[ "$(airport -I)" == "AirPort: Off" ]]; then
	maybeGrowl -e "Your ${aptname} is turned off."
	clog "warning: ${aptname} is turned off."
    fi
    ssid=$(airport -I | grep " SSID:" | sed -e 's/.*: \(.*\)/\1/' \
	-e 's/[ ()]/_/g')
    bssid=$(airport -I | grep BSSID | sed 's/.*BSSID: //')
    while [[ (${count} -lt 6) && (! ${ssid}) ]]; do
	sleep $(( 3 * ++count ))
	ssid=$(airport -I | grep " SSID:" | sed -e 's/.*: \(.*\)/\1/' \
	    -e 's/[ ()]/_/g')
    done
    clog "ssid ${ssid} $([[ ${count} -gt 0 ]] && echo "(took ${count} retries)")"
    [[ ! ${ssid} ]] && maybeGrowl "No SSID after ${count} tries, check airport settings"
}

function wrongLocation() {
    loc="$(scselect 2>&1 | grep " \*" | sed 's/.*(\(.*\))$/\1/')"
    clog "network location is ${loc}"
    if [[ "${loc}" != "Automatic" ]]; then
	clog "changing network location back to automatic."
	[[ ${o_goowl} ]] && maybeGrowl -e "Switching network location to Automatic."
	scselect Automatic
	return 0
    fi
    return 1
}

function maybeTalk() {
    [[ ! ${o_talk} ]] && return
    v=$(osascript -e 'output volume of (get volume settings)')
    m=$(osascript -e 'output muted of (get volume settings)')
    osascript -e 'set volume output volume 30'
    osascript -e 'set volume without output muted'
    say "$@"
    osascript -e "set volume output volume ${v}"
    [[ "${m}" == "true" ]] && w="with" || w="without"
    osascript -e "set volume ${w} output muted"
}

function maybeLaunch() {
    grepTerm="[${1:0:1}]${1:1}"
    pid=$(ps axo pid,command | grep ${grepTerm} | awk '{print $1}')
    [[ ${pid} ]] && clog "${1} already running as pid ${pid}" && return 0
    clog "launching ${1} in ${2} seconds..."
    maybeGrowl "Launching ${1} in ${2} seconds"
    sleep ${2}
    pid=$(ps axo pid,command | grep ${grepTerm} | awk '{print $1}')
    if [[ ${pid} ]]; then
	clog "after ${2} seconds, ${1} was found already running as ${pid}"
	return ${pid}
    fi
    open -a "${1}"
}
    
function recordNetParms() {
    if [[ (${o_iplog}) && ($(which ipinfo)) ]]; then
	echo "------------------------------------------------------------" >> "${o_iplog}"
	echo "${wakeCalled}" >> "${o_iplog}"
	ipinfo >> "${o_iplog}"
	ifconfig ${aptdev} inet6 | grep "inet6 " | \
	    sed 's/.*inet6/inet6:      /' >> "${o_iplog}"
    fi
}

function hookHome() {
    clog hookHome
}

function mainProg() {
    maybeTalk "Waking"
    waitForSSID
    if [[ ${o_debug} ]]; then
	id | tr ',' "\n" | while read line; do
	clog "$(echo ${line} | sed -e 's/(/ (/' -e 's/^\(..\) (/ \1 (/')"; 
	done
    fi

    if wrongLocation; then waitForSSID; fi

    case "${ssid}" in
  	"ELPP")        hookHome;;
	"")            clog "no ssid, exiting early"; return;;
	*)             clog "unrecognized location; skipping hooks";;
    esac
    clog "default printer queue is $(lpstat -d | sed 's/.*: //')"
    recordNetParms
    [[ ! ${ssid} ]] && clog "still waiting for ssid" && waitForSSID
    if [[ ($(ps ax | grep "[P]roxif" | grep -v "Dns")) && (! $(ps ax | grep "[s]sh ")) ]]; then
	maybeTalk "Prox if eye er is running but there are no s s h connections"
	clog "proxifier is running with no underlying ssh connections."
	maybeGrowl -e "Proxifier is running without an underlying ssh connection."
    fi
}

###############################################################################
# Code
###############################################################################

o_debug=
o_talk=
o_growl=true

wakeCalled=$(date "+%Y-%m-%dT%H:%M:%S")
logger -is "Waking"

[[ ${1} == "-d" ]] && o_debug=t

[[ -r "${HOME}/.bashrc" ]] && source "${HOME}/.bashrc" || logger -is "No .bashrc"

o_iplog="${logdir}/com.centvc.ipinfo.log"

clog "------------------------------------------------------------------"
clog "pid $$ as user ${USER} ($UID) ($EUID) called by ${whorang} $*"
mainProg
clog "normal exit, called ${wakeCalled}"

exit 0

