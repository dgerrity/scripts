#!/usr/bin/env bash
###############################################################################
#
# zn - zoom next - will join a specific zoom meeting from the list of
# upcoming candidates in the calendar.
#
# Requires icalBuddy: `$ brew install ical-buddy` (which itself requires brew)
#
# Change history:
# 1.1 Improved debugging strings, looked for unusual URLs containing, i.e.,
#     &nbsp and the double quote character ".  These strings sometimes appear
#     in calendar entries.
# 1.0 initial release
###############################################################################

base_url="${ZOOM_DOMAIN:-zoom.us}"
me=$(basename "$0")
version="1.1"

###############################################################################
# Functions
###############################################################################

# Debugging routines
function enter() {
#   Call at the entry of each function for debugging purposes: enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    [[ ! ${o_debug} ]] && return 0
    ln=${2}; fn=${1}; shift; shift;
    printf "Line %3s, %s" "${ln}" "${fn}"
    [[ "$@" ]] && echo -en "( $(echo "$@" | sed 's/ /, /g') )"
    echo
}

function vecho()   { [[ ${o_verbose} ]] && echo "$@";                }
function vechonr() { [[ ${o_verbose} ]] && echo -en "$@";            }
function decho()   { [[ ${o_debug}   ]] && echo "$@";                }
function don()     { [[ ${o_debug}   ]] && set -x;                   }
function doff()    { [[ ${o_debug}   ]] && set +x;                   }
function dopen()   { [[ ${o_debug}   ]] && echo "|$@|" || open "$@"; }

function usage() {
#   Displays usage information
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    echo "${me} version ${version}"; echo
    [[ "${1}" == "version" ]] && exit 1
    echo "${me} joins the zoom URL for upcoming iCal (Mac calendar) entries using the domain ${base_url}"
    echo "Usage: ${me} [options]"
    echo "             --help"
    echo "Optons"
    echo "  -d           debug"
    echo "  -h           this message"
    echo "  -v           verbose"
    echo "  -i           include all calendars like subscription and Siri suggested"
    echo "  -p           prompt me before joining even if there is only one event"
    echo "  -m minutes   go forward in time when checking events (5 minutes without this option)"
    echo "  -n           start a new zoom meeting and copy to clipboard (uses ZOOM_ME in environment)"
    echo "  -u base-url  override the default domain name of ${base_url} (or set ZOOM_DOMAIN in environment)"
    echo "  -w name      join with name and copy to clipboard.  Uses the environment to join a call (ZOOM_NAME)"
    echo
    echo "Be careful not to post environment variables in public repositories if they have passwords.  To use the \"with\" option,"
    echo "set environment variables to ZOOM_NAME to join that zoom belonging to name.  Use ZOOM_ME for yourself."
    exit 1
}

function zoomical() {
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    i=-1
    offset="${o_minutes:-+5}"
    offsetMins=$(date -v"${offset}M" "+%Y-%m-%d %H:%M:%S %z")
    [[ ${o_include} ]] && includeType= || includeType="-ict CalDAV"
    decho "(icalBuddy -ea ${includeType} -b "%%%" eventsFrom:"${offsetMins}" to:"${offsetMins}")"
    while read -r line; do
    	[[ ! ${line} ]] && continue
    	if [[ $(echo "${line}" | grep "%%%") ]]; then
    	    decho "New event found: ${line}"
    	    topic[++i]=$(echo "${line}" | sed 's/^%%%\(.*$\)/\1/')
    	    vecho "Topic: |${topic[i]}|"
    	elif [[ ! ${url[i]} && $(echo "${line}" | grep "https://[[:alnum:]]*\.\?${base_url}/[jms][^ ]*") ]]; then
    	    decho "Extracting URL from |${line}|"
    	    url[i]="$(echo "${line}" | grep -o "https://[[:alnum:]]*\.\?${base_url}/[jms][^ \"]*" | sed 's/[[:blank:]]//g')"
    	    vecho "URL: |${url[i]}|"
    	elif [[ ! ${block[i]} && $(echo "${line}" | grep "[0-9]\{1,2\}:[0-9]\{2\} [AP]M - [0-9]\{1,2\}") ]]; then
    	    decho "Looking for time in ${line}"
    	    block[i]=$(echo "${line}" | grep -o "[0-9]\{1,2\}:[0-9]\{2\} [AP]M.*$")
    	    vecho "Block: |${block[i]}|"
    	fi
    done < <(icalBuddy -ea ${includeType} -b "%%%" eventsFrom:"${offsetMins}" to:"${offsetMins}")
    vecho "Number of entries found: ${#topic[@]}"
    n=${#topic[@]}
    if [[ ${n} -eq 0 ]]; then
        # No matching events	
	vecho "No events at ${offsetMins}"
	echo "No zoom meetings found."
    elif [[ ${n} -eq 1 ]]; then
        # Only one entry found
	vecho "Single meeting: ${topic[0]}"
	[[ ! ${url[0]} ]] && echo "Not a valid zoom meeting - skipping" && return 1
	response=
	[[ ${o_prompt} ]] && read -rp "Join ${topic[0]}; ${block[0]}? [y] " response
	if [[ (! ${response}) || (${response,,} == "y") ]]; then
	    echo "Joining ${topic[0]}..."
	    dopen "${url[0]}"
	else
	    echo "Skipped"
	fi
    else
        # More than one entry found
	vecho "More than one entry found, processing"
	for (( i=0; i<n; i++ )); do
	    echo "$(( i+1 )) Join ${topic[i]}; ${block[i]}"
	done	
	read -rp "Join which meeting? [cancel] " response
	[[ (! "${response}") || ("${response,,}" == "cancel") ]] && return 1
	[[ $(echo "${response}" | sed 's/[0-9]*//g') ]] && echo "Invalid response - skipping" && return 2
	[[ (${response} -gt ${n}) || (${response} -lt 1) ]] && echo "Invalid meeting number - skipping" && return 3
	[[ ! ${url[ (( --response )) ]} ]] && echo "Not a valid zoom meeting - skipping" && return 4
	echo "Joining ${topic[response]}..."
	dopen "${url[response]}"
    fi
}

function zoomwith() {
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    local envar="ZOOM_${o_with^^}"
    [[ ! ${!envar} ]] && echo "Cannot zoom ${o_with} because ${envar} is not found in the environment." && exit 6
    echo "Joining ${o_with}'s zoom..."
    dopen "${!envar}"
}

function mainprog() {
    enter "${FUNCNAME[0]}" "${LINENO[0]}" "$@"
    if [[ ! $(which icalBuddy) ]]; then
    	echo "This script requires icalBuddy to be installed"
    	if [[ $(which brew) ]]; then
    	    read -rp 'Install icalBuddy through brew [y] ' response
    	    [[ ! ${response} || ("${response}" == "y") ]] && brew install ical-buddy
    	else
    	    echo "Easiest install is through homebrew at https://brew.sh/"
    	fi
    	exit 2
    fi

    [[ ${o_debug} ]] && for i in base_url o_debug o_include o_minutes o_prompt o_verbose o_with BASH_VERSION SHELL; do
    	echo -n "${i}=\"${!i}\" "
    done
    decho
    
    if [[ ${o_with} ]]; then
	zoomwith "$@"
    else
	zoomical "$@"
    fi
}

##############################################################################
# Options
##############################################################################

unset o_debug o_include o_minutes o_prompt o_verbose o_with
while getopts ":dhipm:nu:vw:" option; do
    case ${option} in
	d) o_debug=true; o_verbose=true;;
	h) usage;;
	i) o_include=true;;
	m) o_minutes=${OPTARG}
	   [[ ! $(echo "${o_minutes}" | grep "^[-+]\?[0-9]\{1,4\}$") ]] && usage "$@"
	   [[ ! $(echo "${o_minutes}" | grep "^[-+].*") ]] && o_minutes="+${o_minutes}";;
	n) o_with="me";;
	p) o_prompt=true;;
	u) base_url=${OPTARG,,};;
	v) o_verbose=true;;
	w) o_with=${OPTARG^};;
	:) echo "Required argument to -${OPTARG} not specified."
	   exit 1;;
	*) echo "Option -${option} not recognized."
	   usage "$@";;
    esac
done

mainprog "$@"
